// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Types$BsDiscord = require("./Types.bs.js");
var PayloadTypes$BsDiscord = require("./PayloadTypes.bs.js");

function user(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* username */Json_decode.field("username", Json_decode.string, json),
          /* discriminator */Json_decode.field("discriminator", Json_decode.string, json),
          /* avatar */Json_decode.field("avatar", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          /* bot */Json_decode.optional((function (param) {
                  return Json_decode.field("bot", Json_decode.bool, param);
                }), json),
          /* mfaEnabled */Json_decode.optional((function (param) {
                  return Json_decode.field("mfa_enabled", Json_decode.bool, param);
                }), json),
          /* locale */Json_decode.optional((function (param) {
                  return Json_decode.field("locale", Json_decode.string, param);
                }), json),
          /* verified */Json_decode.optional((function (param) {
                  return Json_decode.field("verified", Json_decode.bool, param);
                }), json),
          /* email */Json_decode.optional((function (param) {
                  return Json_decode.field("email", Json_decode.string, param);
                }), json),
          /* flags */Json_decode.optional((function (param) {
                  return Json_decode.field("flags", Json_decode.$$int, param);
                }), json),
          /* premiumType */Json_decode.optional((function (param) {
                  return Json_decode.field("premium_type", Json_decode.$$int, param);
                }), json)
        ];
}

function channel(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* type_ */Belt_Option.getExn(Types$BsDiscord.channelTypeFromJs(Json_decode.field("type", Json_decode.$$int, json))),
          /* guildId */Json_decode.optional((function (param) {
                  return Json_decode.field("guild_id", Json_decode.string, param);
                }), json),
          /* position */Json_decode.optional((function (param) {
                  return Json_decode.field("position", Json_decode.$$int, param);
                }), json),
          /* name */Json_decode.optional((function (param) {
                  return Json_decode.field("name", Json_decode.string, param);
                }), json),
          /* topic */Json_decode.optional((function (param) {
                  return Json_decode.field("topic", Json_decode.string, param);
                }), json),
          /* nsfw */Json_decode.optional((function (param) {
                  return Json_decode.field("nsfw", Json_decode.bool, param);
                }), json),
          /* lastMessageId */Json_decode.optional((function (param) {
                  return Json_decode.field("lastMessageId", (function (param) {
                                return Json_decode.optional(Json_decode.string, param);
                              }), param);
                }), json),
          /* bitrate */Json_decode.optional((function (param) {
                  return Json_decode.field("bitrate", Json_decode.$$int, param);
                }), json),
          /* userLimit */Json_decode.optional((function (param) {
                  return Json_decode.field("userLimit", Json_decode.$$int, param);
                }), json),
          /* rateLimitPerUser */Json_decode.optional((function (param) {
                  return Json_decode.field("rateLimitPerUser", Json_decode.$$int, param);
                }), json),
          /* recipients */Json_decode.optional((function (param) {
                  return Json_decode.field("recipients", (function (param) {
                                return Json_decode.array(user, param);
                              }), param);
                }), json),
          /* icon */Json_decode.optional((function (param) {
                  return Json_decode.field("icon", (function (param) {
                                return Json_decode.optional(Json_decode.string, param);
                              }), param);
                }), json),
          /* ownerId */Json_decode.optional((function (param) {
                  return Json_decode.field("ownerId", Json_decode.string, param);
                }), json),
          /* applicationId */Json_decode.optional((function (param) {
                  return Json_decode.field("applicationId", Json_decode.string, param);
                }), json),
          /* parentId */Json_decode.optional((function (param) {
                  return Json_decode.field("parentId", (function (param) {
                                return Json_decode.optional(Json_decode.string, param);
                              }), param);
                }), json),
          /* lastPinTimestamp */Json_decode.optional((function (param) {
                  return Json_decode.field("lastPinTimestamp", Json_decode.date, param);
                }), json)
        ];
}

function guildMember(json) {
  return /* record */[
          /* user */Json_decode.field("user", user, json),
          /* nick */Json_decode.optional((function (param) {
                  return Json_decode.field("nick", Json_decode.string, param);
                }), json),
          /* roles */Json_decode.field("roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          /* joinedAt */Json_decode.field("joined_at", Json_decode.date, json),
          /* premiumSince */Json_decode.field("premium_since", (function (param) {
                  return Json_decode.optional(Json_decode.date, param);
                }), json),
          /* deaf */Json_decode.field("deaf", Json_decode.bool, json),
          /* mute */Json_decode.field("mute", Json_decode.bool, json)
        ];
}

function partialGuildMember(json) {
  return /* record */[
          /* user */Json_decode.field("user", user, json),
          /* nick */Json_decode.optional((function (param) {
                  return Json_decode.field("nick", Json_decode.string, param);
                }), json),
          /* roles */Json_decode.optional((function (param) {
                  return Json_decode.field("roles", (function (param) {
                                return Json_decode.array(Json_decode.string, param);
                              }), param);
                }), json),
          /* joinedAt */Json_decode.optional((function (param) {
                  return Json_decode.field("joined_at", Json_decode.date, param);
                }), json),
          /* premiumSince */Json_decode.optional((function (param) {
                  return Json_decode.field("premium_since", (function (param) {
                                return Json_decode.optional(Json_decode.date, param);
                              }), param);
                }), json),
          /* deaf */Json_decode.optional((function (param) {
                  return Json_decode.field("deaf", Json_decode.bool, param);
                }), json),
          /* mute */Json_decode.optional((function (param) {
                  return Json_decode.field("mute", Json_decode.bool, param);
                }), json)
        ];
}

function presenceUser(json) {
  return /* record */[/* id */Json_decode.field("id", Json_decode.string, json)];
}

function unwrapOption(param) {
  if (param !== undefined) {
    var match = Caml_option.valFromOption(param);
    if (match !== undefined) {
      return Caml_option.some(Caml_option.valFromOption(match));
    } else {
      return undefined;
    }
  }
  
}

function activity(json) {
  return /* record */[
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* type_ */Belt_Option.getExn(Types$BsDiscord.activityTypeFromJs(Json_decode.field("type", Json_decode.$$int, json))),
          /* url */unwrapOption(Json_decode.optional((function (param) {
                      return Json_decode.field("url", (function (param) {
                                    return Json_decode.optional(Json_decode.string, param);
                                  }), param);
                    }), json)),
          /* applicationId */Json_decode.optional((function (param) {
                  return Json_decode.field("application_id", Json_decode.string, param);
                }), json),
          /* flags */Json_decode.optional((function (param) {
                  return Json_decode.field("flags", Json_decode.$$int, param);
                }), json)
        ];
}

function clientStatus(json) {
  return /* record */[
          /* desktop */Belt_Option.map(Json_decode.optional((function (param) {
                      return Json_decode.field("desktop", Json_decode.string, param);
                    }), json), (function (statusString) {
                  return Belt_Option.getExn(Types$BsDiscord.clientStatusTypeFromJs(statusString));
                })),
          /* mobile */Belt_Option.map(Json_decode.optional((function (param) {
                      return Json_decode.field("mobile", Json_decode.string, param);
                    }), json), (function (statusString) {
                  return Belt_Option.getExn(Types$BsDiscord.clientStatusTypeFromJs(statusString));
                })),
          /* web */Belt_Option.map(Json_decode.optional((function (param) {
                      return Json_decode.field("web", Json_decode.string, param);
                    }), json), (function (statusString) {
                  return Belt_Option.getExn(Types$BsDiscord.clientStatusTypeFromJs(statusString));
                }))
        ];
}

function presenceUpdate(json) {
  return /* record */[
          /* user */Json_decode.field("user", presenceUser, json),
          /* roles */Json_decode.optional((function (param) {
                  return Json_decode.field("roles", (function (param) {
                                return Json_decode.array(Json_decode.string, param);
                              }), param);
                }), json),
          /* game */Json_decode.optional((function (param) {
                  return Json_decode.field("game", (function (param) {
                                return Json_decode.optional(activity, param);
                              }), param);
                }), json),
          /* guildId */Json_decode.optional((function (param) {
                  return Json_decode.field("guild_id", Json_decode.string, param);
                }), json),
          /* status */Belt_Option.map(Json_decode.optional((function (param) {
                      return Json_decode.field("status", Json_decode.string, param);
                    }), json), (function (statusString) {
                  return Belt_Option.getExn(Types$BsDiscord.statusFromJs(statusString));
                })),
          /* activities */Json_decode.optional((function (param) {
                  return Json_decode.field("activities", (function (param) {
                                return Json_decode.array(activity, param);
                              }), param);
                }), json),
          /* clientStatus */Json_decode.optional((function (param) {
                  return Json_decode.field("client_status", clientStatus, param);
                }), json)
        ];
}

function guild(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* icon */Json_decode.field("icon", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          /* splash */Json_decode.field("splash", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          /* owner */Json_decode.optional((function (param) {
                  return Json_decode.field("owner", Json_decode.bool, param);
                }), json),
          /* ownerId */Json_decode.field("owner_id", Json_decode.string, json),
          /* members */Json_decode.optional((function (param) {
                  return Json_decode.field("members", (function (param) {
                                return Json_decode.array(guildMember, param);
                              }), param);
                }), json),
          /* channels */Json_decode.optional((function (param) {
                  return Json_decode.field("channels", (function (param) {
                                return Json_decode.array(channel, param);
                              }), param);
                }), json),
          /* presences */Json_decode.optional((function (param) {
                  return Json_decode.field("presences", (function (param) {
                                return Json_decode.array(presenceUpdate, param);
                              }), param);
                }), json)
        ];
}

function unavailableGuild(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* unavailable */Json_decode.field("unavailable", Json_decode.bool, json)
        ];
}

function emoji(json) {
  return /* record */[
          /* id */Json_decode.field("id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* user */Json_decode.optional((function (param) {
                  return Json_decode.field("user", user, param);
                }), json),
          /* requireColons */Json_decode.optional((function (param) {
                  return Json_decode.field("require_colons", Json_decode.bool, param);
                }), json),
          /* managed */Json_decode.optional((function (param) {
                  return Json_decode.field("managed", Json_decode.bool, param);
                }), json),
          /* animated */Json_decode.optional((function (param) {
                  return Json_decode.field("animated", Json_decode.bool, param);
                }), json)
        ];
}

function messageReaction(json) {
  return /* record */[
          /* count */Json_decode.field("count", Json_decode.$$int, json),
          /* me */Json_decode.field("me", Json_decode.bool, json),
          /* emoji */Json_decode.field("emoji", emoji, json)
        ];
}

function message(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* channelId */Json_decode.field("channel_id", Json_decode.string, json),
          /* guildId */Json_decode.optional((function (param) {
                  return Json_decode.field("guild_id", Json_decode.string, param);
                }), json),
          /* author */Json_decode.field("author", user, json),
          /* member */Json_decode.optional((function (param) {
                  return Json_decode.field("member", partialGuildMember, param);
                }), json),
          /* content */Json_decode.field("content", Json_decode.string, json),
          /* timestamp */Json_decode.field("timestamp", Json_decode.date, json),
          /* editedTimestamp */Json_decode.field("edited_timestamp", (function (param) {
                  return Json_decode.optional(Json_decode.date, param);
                }), json),
          /* tts */Json_decode.field("tts", Json_decode.bool, json),
          /* mentionEveryone */Json_decode.field("mention_everyone", Json_decode.bool, json),
          /* mentionRoles */Json_decode.field("mention_roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          /* reactions */Json_decode.optional((function (param) {
                  return Json_decode.field("reactions", (function (param) {
                                return Json_decode.array(messageReaction, param);
                              }), param);
                }), json),
          /* nonce */Json_decode.optional((function (param) {
                  return Json_decode.field("nonce", (function (param) {
                                return Json_decode.optional(Json_decode.string, param);
                              }), param);
                }), json),
          /* pinned */Json_decode.field("pinned", Json_decode.bool, json),
          /* webhookId */Json_decode.optional((function (param) {
                  return Json_decode.field("webhookId", Json_decode.string, param);
                }), json),
          /* type_ */Belt_Option.getExn(Types$BsDiscord.messageTypeFromJs(Json_decode.field("type", Json_decode.$$int, json)))
        ];
}

function readyPayload(json) {
  return /* record */[
          /* sessionId */Json_decode.field("session_id", Json_decode.string, json),
          /* user */Json_decode.field("user", user, json),
          /* guilds */Json_decode.field("guilds", (function (param) {
                  return Json_decode.array(unavailableGuild, param);
                }), json)
        ];
}

function helloPayload(json) {
  return /* record */[/* heartbeatInterval */Json_decode.field("heartbeat_interval", Json_decode.$$int, json)];
}

function resumePayload(json) {
  return /* record */[/* trace */Json_decode.field("_trace", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json)];
}

function parseSocketData(json) {
  var match = Belt_Option.getExn(PayloadTypes$BsDiscord.opCodeFromJs(Json_decode.field("op", Json_decode.$$int, json)));
  switch (match) {
    case 0 : 
        var match$1 = PayloadTypes$BsDiscord.dispatchMessageTypeFromJs(Json_decode.field("t", Json_decode.string, json));
        var tmp;
        if (match$1 !== undefined) {
          var match$2 = match$1;
          tmp = match$2 !== -41763132 ? (
              match$2 >= 975859715 ? (
                  match$2 >= 1025039821 ? /* Resume */Block.__(4, [Json_decode.field("d", resumePayload, json)]) : /* MessageCreate */Block.__(2, [Json_decode.field("d", message, json)])
                ) : (
                  match$2 >= 889912559 ? /* GuildCreate */Block.__(1, [Json_decode.field("d", guild, json)]) : /* Ready */Block.__(0, [Json_decode.field("d", readyPayload, json)])
                )
            ) : /* PresenceUpdate */Block.__(3, [Json_decode.field("d", presenceUpdate, json)]);
        } else {
          tmp = /* Unknown */0;
        }
        return /* Dispatch */Block.__(1, [tmp]);
    case 8 : 
        return /* InvalidSession */0;
    case 9 : 
        return /* Hello */Block.__(0, [Json_decode.field("d", helloPayload, json)]);
    case 1 : 
    case 2 : 
    case 3 : 
    case 4 : 
    case 5 : 
    case 6 : 
    case 7 : 
    case 10 : 
        return /* Unknown */1;
    
  }
}

exports.user = user;
exports.channel = channel;
exports.guildMember = guildMember;
exports.partialGuildMember = partialGuildMember;
exports.presenceUser = presenceUser;
exports.unwrapOption = unwrapOption;
exports.activity = activity;
exports.clientStatus = clientStatus;
exports.presenceUpdate = presenceUpdate;
exports.guild = guild;
exports.unavailableGuild = unavailableGuild;
exports.emoji = emoji;
exports.messageReaction = messageReaction;
exports.message = message;
exports.readyPayload = readyPayload;
exports.helloPayload = helloPayload;
exports.resumePayload = resumePayload;
exports.parseSocketData = parseSocketData;
/* No side effect */
