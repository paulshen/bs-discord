// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var PayloadTypes$BsDiscord = require("./PayloadTypes.bs.js");
var PayloadParser$BsDiscord = require("./PayloadParser.bs.js");
var PresenceStore$BsDiscord = require("./state/PresenceStore.bs.js");
var WebsocketClient$BsDiscord = require("./WebsocketClient.bs.js");

var Unsupported = Caml_exceptions.create("App-BsDiscord.Unsupported");

var ws = WebsocketClient$BsDiscord.Websocket[/* make */2](undefined, "wss://gateway.discord.gg/?v=6&encoding=json");

var sessionId = /* record */[/* contents */undefined];

var lastSequenceId = /* record */[/* contents */undefined];

var token = "Mzk4OTE3OTQzNTc0MTM0Nzk1.XRKUnA.KNRkoqpdhZVMEvD3ti0abVECf-k";

function identify(param) {
  return WebsocketClient$BsDiscord.Websocket[/* send */8](ws, JSON.stringify({
                  op: PayloadTypes$BsDiscord.opCodeToJs(/* Identify */2),
                  d: {
                    token: token,
                    properties: {
                      $os: "darwin",
                      $browser: "bs-discord",
                      $device: "bs-discord"
                    }
                  }
                }));
}

function resume(sessionId) {
  var match = lastSequenceId[0];
  return WebsocketClient$BsDiscord.Websocket[/* send */8](ws, JSON.stringify({
                  op: PayloadTypes$BsDiscord.opCodeToJs(/* Resume */5),
                  d: {
                    token: token,
                    session_id: sessionId,
                    seq: match !== undefined ? match : null
                  }
                }));
}

WebsocketClient$BsDiscord.Websocket[/* onOpen */4](ws, (function (param) {
        console.log("onOpen");
        var match = sessionId[0];
        if (match !== undefined) {
          return resume(match);
        } else {
          return identify(/* () */0);
        }
      }));

function handleMessage(message) {
  if (typeof message === "number") {
    return /* () */0;
  } else if (message.tag) {
    var match = message[0];
    if (typeof match === "number") {
      return /* () */0;
    } else {
      switch (match.tag | 0) {
        case 0 : 
            sessionId[0] = match[0][/* sessionId */0];
            return /* () */0;
        case 1 : 
            var match$1 = match[0][/* presences */8];
            if (match$1 !== undefined) {
              return PresenceStore$BsDiscord.updatePresences(match$1);
            } else {
              return /* () */0;
            }
        case 3 : 
            return PresenceStore$BsDiscord.updatePresence(match[0]);
        default:
          return /* () */0;
      }
    }
  } else {
    setInterval((function (param) {
            console.log("heartbeat");
            var match = lastSequenceId[0];
            return WebsocketClient$BsDiscord.Websocket[/* send */8](ws, JSON.stringify({
                            op: PayloadTypes$BsDiscord.opCodeToJs(/* Heartbeat */1),
                            d: match !== undefined ? match : null
                          }));
          }), message[0][/* heartbeatInterval */0]);
    return /* () */0;
  }
}

WebsocketClient$BsDiscord.Websocket[/* onMessage */7](ws, (function (ev) {
        console.log(ev.data);
        var json = JSON.parse(ev.data);
        var match = Json_decode.field("s", (function (param) {
                return Json_decode.optional(Json_decode.$$int, param);
              }), json);
        if (match !== undefined) {
          lastSequenceId[0] = match;
        }
        var message = PayloadParser$BsDiscord.parseSocketData(json);
        console.log("onMessage", message);
        handleMessage(message);
        return /* () */0;
      }));

WebsocketClient$BsDiscord.Websocket[/* onError */5](ws, (function (ev) {
        console.log("onError: " + (String(ev) + ""));
        return WebsocketClient$BsDiscord.Websocket[/* close */3](undefined, undefined, ws);
      }));

WebsocketClient$BsDiscord.Websocket[/* onClose */6](ws, (function (ev) {
        console.log("onClose", ev);
        return /* () */0;
      }));

exports.Unsupported = Unsupported;
exports.ws = ws;
exports.sessionId = sessionId;
exports.lastSequenceId = lastSequenceId;
exports.token = token;
exports.identify = identify;
exports.resume = resume;
exports.handleMessage = handleMessage;
/* ws Not a pure module */
