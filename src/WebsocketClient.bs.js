// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Ws = require("ws");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var $$MessageEvent = /* module */[];

function code(ev) {
  var n = ev.code;
  var switcher = n - 1000 | 0;
  if (switcher > 15 || switcher < 0) {
    return /* CustomCode */[
            n,
            ev
          ];
  } else {
    return switcher;
  }
}

var $$CloseEvent = /* module */[/* code */code];

var UnknownReadyState = Caml_exceptions.create("WebsocketClient-BsDiscord.Websocket.UnknownReadyState");

function readyState(ws) {
  var n = ws.readyState;
  if (n > 3 || n < 0) {
    throw [
          UnknownReadyState,
          n
        ];
  } else {
    return n;
  }
}

function make($staropt$star, url) {
  var protocols = $staropt$star !== undefined ? $staropt$star : /* array */[];
  return new Ws(url, protocols);
}

function close($staropt$star, $staropt$star$1, ws) {
  var code = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : undefined;
  var reason = $staropt$star$1 !== undefined ? Caml_option.valFromOption($staropt$star$1) : undefined;
  return ws.close(code, reason);
}

function onOpen(ws, handler) {
  ws.onopen = handler;
  return /* () */0;
}

function onError(ws, handler) {
  ws.onerror = handler;
  return /* () */0;
}

function onClose(ws, handler) {
  ws.onclose = handler;
  return /* () */0;
}

function onMessage(ws, handler) {
  ws.onmessage = handler;
  return /* () */0;
}

function send(ws, msg) {
  return ws.send(msg);
}

function setBinaryType(ws, binaryType) {
  if (binaryType) {
    ws.binary = "arraybuffer";
    return /* () */0;
  } else {
    ws.binary = "blob";
    return /* () */0;
  }
}

var Websocket = /* module */[
  /* UnknownReadyState */UnknownReadyState,
  /* readyState */readyState,
  /* make */make,
  /* close */close,
  /* onOpen */onOpen,
  /* onError */onError,
  /* onClose */onClose,
  /* onMessage */onMessage,
  /* send */send,
  /* setBinaryType */setBinaryType
];

exports.$$MessageEvent = $$MessageEvent;
exports.$$CloseEvent = $$CloseEvent;
exports.Websocket = Websocket;
/* ws Not a pure module */
