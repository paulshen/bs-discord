// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Api$BsDiscord = require("./Api.bs.js");
var PayloadParser$BsDiscord = require("../PayloadParser.bs.js");

function getChannel(channelId) {
  return Api$BsDiscord.requestGet("/channels/" + (String(channelId) + ""), undefined, /* () */0).then((function (json) {
                return Promise.resolve(PayloadParser$BsDiscord.channel(json));
              }));
}

function updateChannel(channelId, name, position, topic, nsfw, rateLimitPerUser, bitrate, userLimit, parentId, param) {
  var tmp = { };
  if (name !== undefined) {
    tmp.name = Caml_option.valFromOption(name);
  }
  if (position !== undefined) {
    tmp.position = Caml_option.valFromOption(position);
  }
  if (topic !== undefined) {
    tmp.topic = Caml_option.valFromOption(topic);
  }
  if (nsfw !== undefined) {
    tmp.nsfw = Caml_option.valFromOption(nsfw);
  }
  if (rateLimitPerUser !== undefined) {
    tmp.rate_limit_per_user = Caml_option.valFromOption(rateLimitPerUser);
  }
  if (bitrate !== undefined) {
    tmp.bitrate = Caml_option.valFromOption(bitrate);
  }
  if (userLimit !== undefined) {
    tmp.user_limit = Caml_option.valFromOption(userLimit);
  }
  if (parentId !== undefined) {
    tmp.parent_id = Caml_option.valFromOption(parentId);
  }
  var bodyJson = tmp;
  return Api$BsDiscord.requestPost("/channels/" + (String(channelId) + ""), Caml_option.some(bodyJson), /* () */0).then((function (json) {
                var channel = PayloadParser$BsDiscord.channel(json);
                console.log("patchMessage", channel);
                return Promise.resolve(channel);
              }));
}

function deleteChannel(channelId) {
  return Api$BsDiscord.requestDelete("/channels/" + (String(channelId) + "")).then((function (json) {
                var channel = PayloadParser$BsDiscord.channel(json);
                console.log("deleteMessage", channel);
                return Promise.resolve(channel);
              }));
}

function createMessage(channelId, content) {
  var body = { };
  body["content"] = content;
  return Api$BsDiscord.requestPost("/channels/" + (String(channelId) + "/messages"), Caml_option.some(body), /* () */0).then((function (json) {
                var message = PayloadParser$BsDiscord.message(json);
                console.log("createMessage", message);
                return Promise.resolve(message);
              }));
}

function createParams(params) {
  var filteredParams = /* array */[];
  List.iter((function (param) {
          var value = param[1];
          if (value !== undefined) {
            filteredParams.push(/* tuple */[
                  param[0],
                  value
                ]);
            return /* () */0;
          } else {
            return /* () */0;
          }
        }), params);
  return filteredParams;
}

function getMessages(channelId, around, before, after, limit, param) {
  return Api$BsDiscord.requestGet("/channels/" + (String(channelId) + "/messages"), createParams(/* :: */[
                    /* tuple */[
                      "around",
                      around
                    ],
                    /* :: */[
                      /* tuple */[
                        "before",
                        before
                      ],
                      /* :: */[
                        /* tuple */[
                          "after",
                          after
                        ],
                        /* :: */[
                          /* tuple */[
                            "limit",
                            Belt_Option.map(limit, (function (prim) {
                                    return String(prim);
                                  }))
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]), /* () */0).then((function (json) {
                return Promise.resolve(Json_decode.array(PayloadParser$BsDiscord.message, json));
              }));
}

function getMessage(channelId, messageId) {
  return Api$BsDiscord.requestGet("/channels/" + (String(channelId) + ("/messages/" + (String(messageId) + ""))), undefined, /* () */0).then((function (json) {
                return Promise.resolve(PayloadParser$BsDiscord.message(json));
              }));
}

function addReaction(channelId, messageId, emojiName, emojiId) {
  var emoji = "" + (String(emojiName) + (":" + (String(emojiId) + "")));
  return Api$BsDiscord.requestPut("/channels/" + (String(channelId) + ("/messages/" + (String(messageId) + ("/reactions/" + (String(emoji) + "/@me"))))), undefined, /* () */0).then((function (_json) {
                return Promise.resolve(/* () */0);
              }));
}

exports.getChannel = getChannel;
exports.updateChannel = updateChannel;
exports.deleteChannel = deleteChannel;
exports.createMessage = createMessage;
exports.createParams = createParams;
exports.getMessages = getMessages;
exports.getMessage = getMessage;
exports.addReaction = addReaction;
/* No side effect */
